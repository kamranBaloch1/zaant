class _SelectTimingsScreenState extends State<SelectTimingsScreen> {
  Map<String, Map<String, TimeOfDay>> subjectTimings = {};

  Map<String, Map<String, String>> dayTimings = {}; // Added dayTimings map

  bool _isLoading = false;

  // ...

  void _handleSubjectTiming(
    String subject,
    String day, // Added day parameter
    String timeType,
    TimeOfDay time,
  ) {
    setState(() {
      if (!subjectTimings.containsKey(subject)) {
        subjectTimings[subject] = {};
      }
      if (!dayTimings.containsKey(subject)) {
        dayTimings[subject] = {};
      }
      subjectTimings[subject]![timeType] = time;
      dayTimings[subject]![day] = "${time.hour}:${time.minute}";
    });
  }

  // ...

  Future<void> saveTheInstructorData() async {
    try {
      setState(() {
        _isLoading = true;
      });

      // ...

      // Convert subjectTimings to the required format (Map<String, Map<String, String>>)
      final availableTimings = subjectTimings.map((subject, timings) {
        return MapEntry(subject, dayTimings[subject]);
      });

      await instructorProvider.sendVerificationCodeProvider(
        phoneNumber: widget.phoneNumber!,
        qualification: widget.selectedQualification!,
        subjects: widget.selectedSubjects,
        feesPerHour: widget.feesPerHour!,
        subjectTimings: availableTimings,
      );

      setState(() {
        _isLoading = false;
      });
    } catch (e) {
      setState(() {
        _isLoading = false;
      });
      showCustomToast("error accoured");
    }
  }

  // ...

  @override
  Widget build(BuildContext context) {
    return Stack(
      children: [
        // ...

        Expanded(
          child: ListView.builder(
            itemCount: widget.selectedSubjects.length,
            itemBuilder: (context, index) {
              final subject = widget.selectedSubjects[index];
              final timings = subjectTimings[subject] ?? {};
              final selectedDay = dayTimings[subject]?.keys.first;

              return Column(
                crossAxisAlignment: CrossAxisAlignment.start,
                children: [
                  SizedBox(
                    height: 20.h,
                  ),
                  Padding(
                    padding: EdgeInsets.symmetric(horizontal: 16.0.w),
                    child: Text(
                      subject,
                      style: TextStyle(
                        fontWeight: FontWeight.bold,
                        fontSize: 18.sp,
                        color: Colors.black,
                      ),
                    ),
                  ),
                  SizedBox(
                    height: 10.h,
                  ),
                  DropdownButton<String>(
                    value: selectedDay,
                    onChanged: (day) {
                      setState(() {
                        dayTimings[subject] = {day!: ""}; // Initialize with an empty string
                      });
                    },
                    items: [
                      "Monday",
                      "Tuesday",
                      "Wednesday",
                      "Thursday",
                      "Friday",
                      "Saturday",
                      "Sunday",
                    ].map<DropdownMenuItem<String>>((String value) {
                      return DropdownMenuItem<String>(
                        value: value,
                        child: Text(value),
                      );
                    }).toList(),
                  ),
                  ListTile(
                    title: Row(
                      children: [
                        Expanded(
                          child: CustomTimePicker(
                            icon: Icons.time_to_leave_outlined,
                            labelText: "Start Time",
                            selectedTime: timings['start'],
                            onTimeChanged: (time) => _handleSubjectTiming(
                              subject,
                              selectedDay!,
                              'start',
                              time,
                            ),
                          ),
                        ),
                        Expanded(
                          child: CustomTimePicker(
                            icon: Icons.time_to_leave_outlined,
                            labelText: "End Time",
                            selectedTime: timings['end'],
                            onTimeChanged: (time) => _handleSubjectTiming(
                              subject,
                              selectedDay!,
                              'end',
                              time,
                            ),
                          ),
                        ),
                      ],
                    ),
                  ),
                  const Divider(), // Add a divider to separate subjects
                ],
              );
            },
          ),
          dd
        ),

        // ...
      ],
    );
  }
}
